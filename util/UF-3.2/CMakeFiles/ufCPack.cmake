
# If the cmake version includes cpack, use it
if(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")
  if(EXISTS "${CMAKE_ROOT}/Modules/InstallRequiredSystemLibraries.cmake")
    set(CMAKE_INSTALL_MFC_LIBRARIES 1)
    include(InstallRequiredSystemLibraries)
  endif(EXISTS "${CMAKE_ROOT}/Modules/InstallRequiredSystemLibraries.cmake")
  set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "UF is a library of useful functions.")
  set(CPACK_PACKAGE_CONTACT "a.maclean@cas.edu.au")
  set(CPACK_PACKAGE_VENDOR "ACFR")
  set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_FILE_DIR}/ReadMe.txt")
  set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_FILE_DIR}/Copyright.txt")
  set(CPACK_PACKAGE_VERSION_MAJOR "${UF_MAJOR_VERSION}")
  set(CPACK_PACKAGE_VERSION_MINOR "${UF_MINOR_VERSION}")
  set(CPACK_PACKAGE_VERSION_PATCH "${UF_BUILD_VERSION}")
  set(CPACK_PACKAGE_VERSION  ${UF_MAJOR_VERSION}.${UF_MINOR_VERSION})
  set(CPACK_PACKAGE_INSTALL_DIRECTORY "uf-${CPACK_PACKAGE_VERSION}")
  set(CPACK_SOURCE_PACKAGE_FILE_NAME "uf-${CPACK_PACKAGE_VERSION}.${UF_BUILD_VERSION}")
  set(CPACK_TOPLEVEL_TAG ${CMAKE_INSTALL_PREFIX})

  if(NOT DEFINED CPACK_SYSTEM_NAME)
    set(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
    if(${CPACK_SYSTEM_NAME} MATCHES unknown)
      set(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM})
    endif(${CPACK_SYSTEM_NAME} MATCHES unknown)
  endif(NOT DEFINED CPACK_SYSTEM_NAME)

if(0)
  if(EXISTS "${CMAKE_ROOT}/Modules/CPackDeb.cmake")
    message("Debian stuff")
    set(CPACK_DEBIAN_PACKAGE_NAME ${CPACK_PACKAGE_NAME})
    set(CPACK_DEBIAN_PACKAGE_VERSION ${CPACK_PACKAGE_VERSION})
    set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "i386")
    set(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6 (>= 2.3.1-6), libgcc1 (>= 1:3.4.2-12)")
    set(DEBIAN_PACKAGE_MAINTAINER ${CPACK_PACKAGE_CONTACT})
    set(DEBIAN_PACKAGE_DESCRIPTION ${CPACK_PACKAGE_DESCRIPTION_SUMMARY})

    message("CPACK_TOPLEVEL_TAG=${CPACK_TOPLEVEL_TAG}")
    message("CPACK_DEBIAN_PACKAGE_NAME=${CPACK_DEBIAN_PACKAGE_NAME}")
    message("CPACK_DEBIAN_PACKAGE_VERSION=${CPACK_DEBIAN_PACKAGE_VERSION}")
    message("CPACK_DEBIAN_PACKAGE_ARCHITECTURE=${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}")
    message("CPACK_DEBIAN_PACKAGE_DEPENDS =${CPACK_DEBIAN_PACKAGE_DEPENDS}")
    message("DEBIAN_PACKAGE_MAINTAINER=${DEBIAN_PACKAGE_MAINTAINER}")
    message("DEBIAN_PACKAGE_DESCRIPTION=${DEBIAN_PACKAGE_DESCRIPTION}")
    message("DEBIAN_PACKAGE_SECTION=${DEBIAN_PACKAGE_SECTION}")
    message("DEBIAN_PACKAGE_PRIORITY=${DEBIAN_PACKAGE_PRIORITY}")
    message("DEBIAN_PACKAGE_RECOMMENDS=${DEBIAN_PACKAGE_RECOMMENDS}")
    message("DEBIAN_PACKAGE_SUGGESTS=${DEBIAN_PACKAGE_SUGGESTS}")
  endif(EXISTS "${CMAKE_ROOT}/Modules/CPackDeb.cmake")
endif(0)

  if(${CPACK_SYSTEM_NAME} MATCHES Windows)
    if(CMAKE_CL_64)
      set(CPACK_SYSTEM_NAME win64-${CMAKE_SYSTEM_PROCESSOR})
    else(CMAKE_CL_64)
      set(CPACK_SYSTEM_NAME win32-${CMAKE_SYSTEM_PROCESSOR})
    endif(CMAKE_CL_64)
  endif(${CPACK_SYSTEM_NAME} MATCHES Windows)
  if(NOT DEFINED CPACK_PACKAGE_FILE_NAME)
    set(CPACK_PACKAGE_FILE_NAME "${CPACK_SOURCE_PACKAGE_FILE_NAME}-${CPACK_SYSTEM_NAME}")
  endif(NOT DEFINED CPACK_PACKAGE_FILE_NAME)

  if(WIN32 AND NOT UNIX)
    # There is a bug in NSI that does not handle full unix paths properly. Make
    # sure there is at least one set of four (4) backlasshes.
    set(CPACK_PACKAGE_ICON "${CMAKE_FILE_DIR}\\\\UF.bmp")
    set(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_INSTALL_DIRECTORY}")
    set(CPACK_NSIS_CONTACT "a.maclean@cas.edu.au")
    set(CPACK_NSIS_MODIFY_PATH ON)
  else(WIN32 AND NOT UNIX)
  # Discard symbols from the object files.
  #  set(CPACK_SOURCE_STRIP_FILES "bin/TestCSVParser")
    set(CPACK_SOURCE_STRIP_FILES 1)
    set(CPACK_STRIP_FILES 1)
  endif(WIN32 AND NOT UNIX)
  # Executables
  # set(CPACK_PACKAGE_EXECUTABLES
  #  "TestCSVParser" "TestCSVParser"
  #  )

  include(CPack)
endif(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")

